#! /usr/bin/python

"""
Usage:
    opensub-get (-h | --help)
    opensub-get (-m | --man)
    opensub-get (-V | --version)
    opensub-get [-v | -vv]
                [-f | --force]
                [-l <language> | --language=<language>]
                [-s <server> | --server=<server>]
                [--extract | --template=<template>]
                [--]
                <video-files>...

Options:
    -h, --help     Print usage and exit.
    -m, --man      Print full manual and exit.
    -V, --version  Print version and exit.

    -v, --verbose  Increase verbosity. May be used twice (-vv).
    -f, --force    Overwrite existing files when creating output files.

    -l <language>, --language=<language>
        ISO 639 code of subtitle language. [default: eng]

    -s <server>, --server=<server>
        Subtitle server. [default: www.opensubtitles.org]

    -x, --extract
        Extract output files as they are.
        Mutually exclusive with --template.
        See NAMING SCHEMES in manual (--man).

    -t <template>, --template=<template>
        Name output files according to template.
        Mutually exclusive with --extract.
        See NAMING SCHEMES in manual (--man).
        [default: {video/dir}{video/base}{subtitle/ext}]
"""

__doc_rest__ = """
Description:
    opensub-get - Download subtitles for a movie from opensubtitles.org.

    Do you hunt for subtitles based on movie title, file name, file size,
    frame rate? Do you still adjust the subtitle delay and frame rate
    in case you didn't find the perfect subtitle file? Are you tired of
    all this?

    This program calculates a hash of the movie you give it, and queries
    opensubtitles.org by hash. The hash is a function of file size
    and _content_. Therefore you're guaranteed to get an exact match.
    Quality still may be high or low, but someone uploaded the subtitle
    file(s) for the exact same video file(s) you have.

    It downloads the subtitle file(s) and places them locally where your
    video player expects them to be. By default it refuses to overwrite
    existing files (though you can explicitly ask for it). For details
    see Naming Schemes.

Subtitle File Naming Schemes:
    1) Default: to match video file names.

        This mode assembles the output file name from:

        * the video file path minus its extension
        * the subtitle extension as in the archive

        Example:

        arguments      output files
        --             --
        movie_cd1.avi  movie_cd1.srt (or .sub, .smi, whatever)
        movie_cd2.avi  movie_cd2.srt
        ...

        Internally uses template: {video/dir}{video/base}{subtitle/ext}

    2) Extract the archive as it is: --extract.

        Keep the subtitle file names as they are in the archive,
        but throw away the leading directories if there's any.

        Internally uses template: {subtitle/base}{subtitle/ext}

    3) Use a template explicitly: --template TEMPLATE

        The following variables in TEMPLATE will be substituted:

        {num}
        Running index of subtitle files. Doesn't make much sense unless
        you have multiple subtitle files. Starts counting from 1.

        {video/dir} {video/base} {video/ext}
        Parts of the respective video file path.

        {subtitle/dir} {subtitle/base} {subtitle/ext}
        Parts of the respective subtitle file path as it is in the archive.

        Path parts example:

            video        : path/to/file.foo

            {video/dir}  : path/to/   # NB: trailing slash included
            {video/base} : file
            {video/ext}  : .foo       # NB: leading dot included

        The concatenation of dir, base and ext add up to a path
        equivalent to the original.

        '--template -' writes the concatenated output to stdout.

Environment Variables:
    http_proxy=proxy:port - For details see Python's urrlib2.
    TMPDIR, TEMP, TMP - For details see Python's tempfile.

Known Limitations:
    Multiple video file arguments are interpreted as video files belonging
    to the same movie. Such movies were typical in the Compact Disc era.
    They are still encountered - especially amongst older and rarer
    movies.  This program still supports them, but this support comes at
    the price of less convenient handling of multiple movies or episodes.
    Suggested workarounds for multiple one-video-file movies or for
    episodes of series:

        for episode in *
        do
            opensub-get "$episode"
        done

        find . -iname '*.avi' -print0 | xargs -0 -n1 opensub-get

See Also:
    opensub-hash

    Search by movie title and other search options:
        http://www.opensubtitles.org/search/

    Subtitle upload:
        http://www.opensubtitles.org/upload/

    Open Subtitles DataBase:
        http://trac.opensubtitles.org/projects/opensubtitles/wiki/OSDb

Credits:
    Many thanks to opensubtitles.org's folks for their great service.
    Copyright (c) 2013 Bence Romsics <rubasov+opensub@gmail.com>
"""

import logging
import os
import sys
import textwrap

import six
if six.PY3:
    import urllib.request as urllib_request
else:
    import urllib2 as urllib_request

import docopt

# Make it possible to run out of the working copy.
# This is irrelevant after install.
sys.path.insert(0,
    os.path.join(
        os.path.dirname(__file__),
        os.pardir,
        "lib",
        ))

import opensub
from opensub import __version__


def parse_args(doc=__doc__, version=__version__, argv=sys.argv[1:]):

    """
    Parse command line options and arguments.

    Also handles early exits, like print-help-and-exit.

    Returns:
        dict of options and arguments
    """

    args = docopt.docopt(doc, version=version, argv=argv)

    if args["--man"]:
        print(__doc__ + __doc_rest__)
        sys.exit(0)

    if args["--extract"]:
        args["--template"] = "{subtitle/base}{subtitle/ext}"

    def error_exit(msg, exit_code=1):
        sys.stdout.flush()
        sys.stderr.write(msg)
        sys.exit(exit_code)

    for video_file in args["<video-files>"]:
        if os.path.exists(video_file):
            if os.path.isdir(video_file):
                error_exit("is a directory: {}\n".format(video_file))
        else:
            error_exit("no such file: {}\n".format(video_file))

    return args


def setup_logging(verbosity,
    fmt="%(levelname)s: %(filename)s:%(lineno)d: %(message)s"):

    """
    Set log level and format.

    Takes:
        verbosity - verbosity level: 0, 1, 2

    Side effect:
        changes global logging settings
    """

    verbosity_to_level = {0: "WARNING", 1: "INFO", 2: "DEBUG"}

    try:
        # turn symbolic level to numeric level
        num_level = getattr(logging, verbosity_to_level[verbosity])
    except KeyError:
        raise Exception("invalid verbosity level: {}".format(verbosity))

    logging.basicConfig(level=num_level, format=fmt)


def default_opener(version, program=sys.argv[0]):

    """Create urllib(2) opener to always add user-agent header."""

    user_agent = "{}/{}".format(os.path.basename(program), version)

    headers = list()
    headers.append(("User-Agent", user_agent))

    # This is an intentionally undocumented hack for less intrusive testing.
    # Use it only if you know what you are doing.
    # http_cache_control=only-if-cached http_proxy=127.0.0.1:8123 program ...
    if "http_cache_control" in os.environ:
        logging.warning("more magic, anything may happen")
        headers.append(("Cache-Control", os.environ["http_cache_control"]))

    opener = urllib_request.build_opener()
    opener.addheaders = headers

    return opener


def print_not_found_hint(file_):

    msg = textwrap.dedent(
        """
        Maybe...
        ...the video has embedded subtitles?
               Typical for .mkv files.
        ...you could try a different --language?
        ...you could try other search options?
               By title, IMDb id, etc.
               http://www.opensubtitles.org/search/
        ...you could upload the subtitle later
               so that others have better luck.
               http://www.opensubtitles.org/upload/
        """
        )
    file_.write(msg)


def main():

    args = parse_args()
    setup_logging(verbosity=args["--verbose"])

    opener = default_opener(version=__version__)

    ua = opensub.UserAgent(
        server=args["--server"],
        opener=opener,
        )

    search_results = ua.search(
        movie=args["<video-files>"],
        language=args["--language"],
        )

    try:
        preferred_result = search_results[0]

    except IndexError:
        logging.error("subtitle not found")
        sys.stdout.flush()
        print_not_found_hint(sys.stderr)
        sys.exit(1)

    with opensub.SubtitleArchive(
        url=preferred_result, opener=opener) as archive:

        count_of_files_written = archive.extract(
            movie=args["<video-files>"],
            builder=opensub.FilenameBuilder(args["--template"]),
            overwrite=args["--force"],
            )

    if count_of_files_written < len(args["<video-files>"]):
        logging.warning(
            "couldn't find/extract/write {} file(s)".format(
                len(args["<video-files>"]) - count_of_files_written))
        sys.exit(1)
    else:
        sys.exit(0)


if __name__ == "__main__":
    main()
