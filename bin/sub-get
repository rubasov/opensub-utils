#! /usr/bin/python

"""
NAME
    sub-get - download subtitle for a movie from opensubtitles.org

SYNOPSIS
    sub-get MOVIE-FILE [MOVIE-FILE-CD2 ...]

TODO
    documentation
    license
    upload to github
        ask for review by opensubtitles' folks
    rename to opensub-get ?
    unit test suite
        if __name__ == "__main__": test()
    python2/3 compatibility
    unix/windows portability
    setup.py
    use opensubtitle.org's xmlrpc api?
    multiple languages in preference order?
"""

import argparse
import errno
import logging
import os
import sys

sys.path.append(
     os.path.join(
         os.path.dirname(__file__), "..", "lib" ) )

import opensubtitles

def setup_logging(verbosity):

    log_level_dict = {
        0: "WARNING",
        1: "INFO",
        2: "DEBUG",
        }

    try:
        log_level = getattr( logging, log_level_dict[verbosity] )
    except KeyError:
        raise Exception(
            "invalid log level: -{}".format( "v" * verbosity ) )

    logging.basicConfig(
        level = log_level,
        format = "%(levelname)s: %(filename)s:%(lineno)d: %(message)s",
        )

    return None

def parse_cli_args():

    """
    Procedure for command line argument parsing.

    TODO:
        -o --out [-|FILE_FMT_STRING]
        --out-as-in-archive
        --server
        --print-hash
    """

    p = argparse.ArgumentParser()

    # FIXME validate language id
    p.add_argument(
        "-l", "--language",
        action = "store",
        default = "eng",
        help = "subtitle language (ISO 639), optional, default: eng",
        )

    p.add_argument(
        "-s", "--server",
        action = "store",
        default = "www.opensubtitles.org",
        help = "server to query, optional, default: www.opensubtitles.org",
        )

    # FIXME --template-num-start, default=1
    p.add_argument(
        "-t", "--template",
        action = "store",
        help = "name output files like: 'template-{num}.{ext}', optional",
        )

    p.add_argument(
        "-v", "--verbose",
        action = "count",
        default = 0,
        help = "increase verbosity (-v, -vv), optional",
        )

    p.add_argument("movie",
        nargs = "+",
        help = "video file (or files belonging to the same movie)",
        )

    return p.parse_args()

def main():

    args = parse_cli_args()
    setup_logging( verbosity = args.verbose )

    for video_file in args.movie:
        if not os.path.isfile(video_file):
            raise Exception( "no such file: {}".format(video_file) )

    def user_agent(
        program = os.path.basename( sys.argv[0] ),
        version = "0.9",
        ):
        return "{}/{}".format(program, version)

    ua = opensubtitles.UserAgent(
        server = args.server,
        user_agent = user_agent(),
        )

    subtitle_list = ua.get_subtitle(
        movie = args.movie,
        language = args.language,
        )

    # name output files by --template
    if not args.template is None:

        for idx, subtitle in enumerate(subtitle_list, start=1):

            _, ext = os.path.splitext(subtitle.name)
            assert ext != ""
            path = args.template.format(num=idx, ext=ext[1:])

            logging.debug("sub_path: {}".format(path))

            try:
                subtitle.write(path=path)
            except OSError as e:
                if e.errno == errno.EEXIST:
                    pass
                else:
                    raise

    ## assumptions:
    ##   * the user provided video files in "natural order"
    ##   * subtitle_list is sorted by subtitle.name,
    ##     therefore it is in "natural order"
    #for video_file, subtitle in zip( args.movie, subtitle_list ):

    #    assert not video_file is None
    #    assert not subtitle is None

    #    base, _ = os.path.splitext(video_file)
    #    _, extension = os.path.splitext(subtitle.name)
    #    dest = base + extension

    #    logging.debug(
    #        "extract_rename: {} -> {}".format(subtitle.name, dest) )

if __name__ == "__main__":
    main()
